Depois que a análise lexical é feita, analisamos o fluxo de tokens gerado.  
Nesse caso, como as regras gramaticais da linguagem são prolixas, usamos a  
árvore de análise como árvore de sintaxe abstrata. Embora geralmente não seja a  
melhor prática usar a árvore de análise como a árvore de sintaxe abstrata porque  
ela contém muitas informações inúteis, aqui foi uma escolha razoável, pois as  
produções em gramática não eram muito complexas.

O Parser foi implementado usando bison. Semelhante ao  
caso lexer, o bison gera o autômato de análise de baixo para cima LALR (1) a  
partir do arquivo de especificação. Cada produção é representada como uma regra  
seguida pelo retorno de chamada "na ação reconhecida". Essa implementação é uma  
variante de uma tradução direcionada por sintaxe ad-hoc, em que cada retorno de  
chamada de produção constrói a árvore de análise para a expressão atual a partir  
das árvores menores de subexpressões já analisadas.

A precedencia das operações foram definidas segundo o manual da linguagem.

No trecho de código a seguir, é possivel observar como especificamos produções e regras para construir a árvore de análise.

    expr : OBJECTID ASSIGN expr
              { $$ = assign($1, $3); }
          | expr '@' TYPEID '.' OBJECTID '(' expr_list_comma ')'
              { $$ = static_dispatch($1, $3, $5, $7); }
          | expr '.' OBJECTID '(' expr_list_comma ')'
              { $$ = dispatch($1, $3, $5); }
          | OBJECTID '(' expr_list_comma ')'
              { $$ = dispatch(object(idtable.add_string("self")), $1, $3); }
          | IF expr THEN expr ELSE expr FI
              { $$ = cond($2, $4, $6); }
          | WHILE expr LOOP expr POOL
              { $$ = loop($2, $4); }
          | '{' expr_list_semicolon '}'
              { $$ = block($2); }
          | LET let_body
              { $$ = $2; }
          | CASE expr OF case_list ESAC
              { $$ = typcase($2, $4); }
          | NEW TYPEID
              { $$ = new_($2); }
          | ISVOID expr
              { $$ = isvoid($2); }
          | expr '+' expr
              { $$ = plus($1, $3); }
          | expr '-' expr
              { $$ = sub($1, $3); }
          | expr '*' expr
              { $$ = mul($1, $3); }
          | expr '/' expr
              { $$ = divide($1, $3); }
          | '~' expr
              { $$ = neg($2); }
          | expr '<' expr
              { $$ = lt($1, $3); }
          | expr LE expr
              { $$ = leq($1, $3); }
          | expr '=' expr
              { $$ = eq($1, $3); }
          | NOT expr
              { $$ = comp($2); }
          | '(' expr ')'
              { $$ = $2; }
          | OBJECTID
              { $$ = object($1); }
          | INT_CONST
              { $$ = int_const($1); }
          | STR_CONST
              { $$ = string_const($1); }
          | BOOL_CONST
              { $$ = bool_const($1); }
          ;
